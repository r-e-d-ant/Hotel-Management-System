/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.ClientDao;
import dao.RoomDao;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Client;
import model.Room;

/**
 *
 * @author hg_ofthecity
 */
public class Home extends javax.swing.JFrame {
    // Global variables
    DefaultTableModel tableModel = new DefaultTableModel();
    
    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        addColumnsOnTable();
        retrieveDataFromDbToTable();
        RoomDao roomDao = new RoomDao();
        Room theRoom = new Room();
        ResultSet result = roomDao.getAllRooms(theRoom);
        
        // populate rooms in room number combo box by showing available and unavailable rooms
        try {
            javax.swing.DefaultComboBoxModel roomTypeElement = new javax.swing.DefaultComboBoxModel<>(new String[] {});
            
            while(result.next()) {
                roomTypeElement.addElement(result.getString("room_no"));
            }
            roomTypeSelector.setModel(roomTypeElement);
        } catch (SQLException ex) {
            Logger.getLogger(RegisterClient.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    private void addColumnsOnTable() {
        tableModel.addColumn("Id");
        tableModel.addColumn("F Name");
        tableModel.addColumn("L Name");
        tableModel.addColumn("Room nr");
        tableModel.addColumn("Fee");
        tableModel.addColumn("Enter date");
        tableModel.addColumn("Exit date");
        tableModel.addColumn("Days");
        displayClientsTable.setModel(tableModel);
    }
    
    private String getUserLevel() {
        File file = new File("usrlvl.txt");
        
        Path sourceFile = Paths.get(file.toURI());
        
        try (BufferedReader reader = Files.newBufferedReader(sourceFile)){
            String line = reader.readLine();
            return line;
        } catch (Exception e) {
            System.out.println("Something went wrong! " + e);
            return null;
        }
    }
    
    private void retrieveDataFromDbToTable () {
        ClientDao clientDao = new ClientDao();
        
        try {
            ResultSet result = clientDao.displayClients();
            
            // clear the rows first
            tableModel.setRowCount(0);
            
            while (result.next()) {
                tableModel.addRow(new Object[] {
                    result.getString(1),
                    result.getString(2),
                    result.getString(3),
                    result.getString(4),
                    result.getString(7),
                    result.getString(5),
                    result.getString(6),
                    Math.round(Float.parseFloat(result.getString(8)))
                });
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        displayClientsTable = new javax.swing.JTable();
        searchInputBox = new javax.swing.JTextField();
        searchClientBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        updateClientBtn = new javax.swing.JButton();
        deleteClientBtn = new javax.swing.JButton();
        newClientBtn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        fnameBox = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        lnameBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        clientIdBox = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        entranceDateBox = new com.toedter.calendar.JDateChooser();
        exitDateBox = new com.toedter.calendar.JDateChooser();
        billGeneratorBtn = new javax.swing.JButton();
        roomTypeSelector = new javax.swing.JComboBox<>();
        gotoMenuLink = new javax.swing.JLabel();
        jMenuBar6 = new javax.swing.JMenuBar();
        openRoomMgtWindowLink = new javax.swing.JMenu();
        openAddRoomWindowLink = new javax.swing.JMenu();
        adminWindowLink = new javax.swing.JMenu();
        openLogoutWindowLink = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        displayClientsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        displayClientsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                displayClientsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(displayClientsTable);

        searchInputBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                searchInputBoxKeyReleased(evt);
            }
        });

        searchClientBtn.setText("Search");
        searchClientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchClientBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 102));
        jLabel1.setText("Enter Id, First name or Last name to search");

        updateClientBtn.setForeground(new java.awt.Color(0, 102, 102));
        updateClientBtn.setText("Update");
        updateClientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateClientBtnActionPerformed(evt);
            }
        });

        deleteClientBtn.setForeground(new java.awt.Color(0, 102, 102));
        deleteClientBtn.setText("Delete");
        deleteClientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteClientBtnActionPerformed(evt);
            }
        });

        newClientBtn.setForeground(new java.awt.Color(0, 102, 102));
        newClientBtn.setText("New client");
        newClientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newClientBtnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("First name");

        jLabel7.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 102, 102));
        jLabel7.setText("Last name");

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("National/Passport Id");

        clientIdBox.setEditable(false);
        clientIdBox.setBackground(new java.awt.Color(241, 240, 240));

        jLabel9.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 102, 102));
        jLabel9.setText("Room no");

        jLabel5.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("Entrance date");

        jLabel6.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 102, 102));
        jLabel6.setText("Exit date");

        entranceDateBox.setDateFormatString("dd MM yyyy");

        exitDateBox.setDateFormatString("dd MM yyyy");

        billGeneratorBtn.setForeground(new java.awt.Color(0, 102, 102));
        billGeneratorBtn.setText("Bill");
        billGeneratorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                billGeneratorBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addComponent(fnameBox)
                            .addComponent(jLabel5)
                            .addComponent(entranceDateBox, javax.swing.GroupLayout.DEFAULT_SIZE, 228, Short.MAX_VALUE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel7)
                            .addComponent(lnameBox)
                            .addComponent(jLabel6)
                            .addComponent(exitDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 127, Short.MAX_VALUE)
                                .addComponent(billGeneratorBtn)
                                .addGap(18, 18, 18)
                                .addComponent(newClientBtn)
                                .addGap(19, 19, 19)
                                .addComponent(updateClientBtn)
                                .addGap(20, 20, 20)
                                .addComponent(deleteClientBtn))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(clientIdBox, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 221, Short.MAX_VALUE))
                                    .addComponent(roomTypeSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(searchInputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 856, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(searchClientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchInputBox, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchClientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 374, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fnameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(12, 12, 12)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(clientIdBox, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)
                                    .addComponent(roomTypeSelector))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(entranceDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteClientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(updateClientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(newClientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(billGeneratorBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(1, 1, 1))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lnameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exitDateBox, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        gotoMenuLink.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        gotoMenuLink.setForeground(new java.awt.Color(0, 153, 255));
        gotoMenuLink.setText("Cancel");
        gotoMenuLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gotoMenuLinkMouseClicked(evt);
            }
        });

        openRoomMgtWindowLink.setForeground(new java.awt.Color(0, 153, 255));
        openRoomMgtWindowLink.setText("Room management");
        openRoomMgtWindowLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openRoomMgtWindowLinkMouseClicked(evt);
            }
        });
        jMenuBar6.add(openRoomMgtWindowLink);

        openAddRoomWindowLink.setForeground(new java.awt.Color(0, 153, 255));
        openAddRoomWindowLink.setText("Add room");
        openAddRoomWindowLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                openAddRoomWindowLinkMouseClicked(evt);
            }
        });
        jMenuBar6.add(openAddRoomWindowLink);

        adminWindowLink.setForeground(new java.awt.Color(0, 153, 255));
        adminWindowLink.setText("Admin");
        adminWindowLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    adminWindowLinkMouseClicked(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jMenuBar6.add(adminWindowLink);

        openLogoutWindowLink.setForeground(new java.awt.Color(0, 153, 255));
        openLogoutWindowLink.setText("Logout");
        openLogoutWindowLink.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                try {
                    openLogoutWindowLinkMouseClicked(evt);
                } catch (SQLException e) {
                    throw new RuntimeException(e);
                }
            }
        });
        jMenuBar6.add(openLogoutWindowLink);

        setJMenuBar(jMenuBar6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(gotoMenuLink)
                .addGap(31, 31, 31))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gotoMenuLink)
                .addGap(0, 14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void openRoomMgtWindowLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openRoomMgtWindowLinkMouseClicked
        // TODO add your handling code here:
        RoomMgt roomMgtForm = new RoomMgt();
        roomMgtForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_openRoomMgtWindowLinkMouseClicked

    private void openAddRoomWindowLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_openAddRoomWindowLinkMouseClicked
        // TODO add your handling code here:
        RegisterRoom registerRoomForm = new RegisterRoom();
        registerRoomForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_openAddRoomWindowLinkMouseClicked

    private void openLogoutWindowLinkMouseClicked(java.awt.event.MouseEvent evt) throws SQLException {//GEN-FIRST:event_openLogoutWindowLinkMouseClicked
        // TODO add your handling code here:
        Login loginForm = new Login();
        loginForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_openLogoutWindowLinkMouseClicked

    private void displayClientsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_displayClientsTableMouseClicked
        // TODO add your handling code here:
        tableModel = (DefaultTableModel) displayClientsTable.getModel();
        int hr = displayClientsTable.getSelectedRow();
        fnameBox.setText(tableModel.getValueAt(hr, 1).toString());
        lnameBox.setText(tableModel.getValueAt(hr, 2).toString());
        clientIdBox.setText(tableModel.getValueAt(hr, 0).toString());
        roomTypeSelector.setSelectedItem(tableModel.getValueAt(hr, 3).toString());
        
        // ---------- format date ----------
        SimpleDateFormat df = new SimpleDateFormat("dd MM yyyy");
        java.util.Date entranceDate;
        java.util.Date exitDate;
        
        try {
            entranceDate = df.parse(tableModel.getValueAt(hr, 5).toString());
            exitDate = df.parse(tableModel.getValueAt(hr, 6).toString());
            
            entranceDateBox.setDate(entranceDate);
            exitDateBox.setDate(exitDate);
        } catch (ParseException ex) {
            Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_displayClientsTableMouseClicked

    // function to update room if it is taken
    public int updateRoom(String no, String status) {
        Room theRoom = new Room();
        RoomDao roomDao = new RoomDao();
        
        theRoom.setRoomNo(no);
        theRoom.setRoomStatus(status);
        
        int rowsAffected = roomDao.updateRoomStatus(theRoom);
        
        return rowsAffected;
    }
    
    
    private void updateClientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateClientBtnActionPerformed
        // TODO add your handling code here:
        // Instantiate the User model object
        
        SimpleDateFormat df = new SimpleDateFormat("dd MM yyyy");
        
        if (fnameBox.getText().isEmpty() || lnameBox.getText().isEmpty()
                || clientIdBox.getText().isEmpty()
                || (df.format(entranceDateBox.getDate()).equals(""))
                || (df.format(exitDateBox.getDate()).equals(""))
                ) {
            JOptionPane.showMessageDialog(this, "First select a client to update");
        } else {
            Client theClient = new Client();
        
            // set the rooms in model
            theClient.setFirstName(fnameBox.getText());
            theClient.setLastName(lnameBox.getText());
            theClient.setClientId(clientIdBox.getText());
            
            String SelectedRoom = roomTypeSelector.getSelectedItem().toString();
            theClient.setRoomNo(SelectedRoom);
            // --------------

            String entranceDate = df.format(entranceDateBox.getDate());
            theClient.setEntranceDate(entranceDate);

            String exitDate = df.format(exitDateBox.getDate());
            theClient.setExitDate(exitDate);

            // Instantiate the User DAO object
            ClientDao clientDao = new ClientDao();
            int rows = clientDao.updateClient(theClient);
            // update room status to taken
            int updatedRooms = updateRoom(SelectedRoom, "taken");

            if (rows >= 1 && updatedRooms >= 1) {
                JOptionPane.showMessageDialog(this, "Client updated");
                retrieveDataFromDbToTable();
            } else {
                JOptionPane.showMessageDialog(this, "Client not updated");
            }
        }
    }//GEN-LAST:event_updateClientBtnActionPerformed

    private void newClientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newClientBtnActionPerformed
        // TODO add your handling code here:
        RegisterClient registerClientForm = new RegisterClient();
        registerClientForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_newClientBtnActionPerformed

    private void deleteClientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteClientBtnActionPerformed
        // TODO add your handling code here:
        
        SimpleDateFormat df = new SimpleDateFormat("dd MM yyyy");
        
        if (fnameBox.getText().isEmpty() || lnameBox.getText().isEmpty()
                || clientIdBox.getText().isEmpty()
                || (int) roomTypeSelector.getSelectedIndex() == 0
                || (df.format(entranceDateBox.getDate()).equals(""))
                || (df.format(exitDateBox.getDate()).equals(""))
                ) {
            JOptionPane.showMessageDialog(this, "First select a client to delete");
        } else {
            // Instantiate the User model object
            Client theClient = new Client();

            // set the rooms in model
            theClient.setClientId(clientIdBox.getText());

            // Instantiate the User DAO object
            ClientDao clientDao = new ClientDao();
            int rows = clientDao.deleteClient(theClient);

            if (rows >= 1) {
                JOptionPane.showMessageDialog(this, "Client deleted");
                retrieveDataFromDbToTable();
            } else {
                JOptionPane.showMessageDialog(this, "Client not deleted");
            }
        }
    }//GEN-LAST:event_deleteClientBtnActionPerformed

    private void searchClientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchClientBtnActionPerformed
        // TODO add your handling code here:
        ClientDao clientDao = new ClientDao();
        
        try {
            ResultSet result = clientDao.searchClient(searchInputBox.getText());
            
            // clear the rows
            tableModel.setRowCount(0);
            
            while (result.next()) {
                tableModel.addRow(new Object[] {
                    result.getString(1),
                    result.getString(2),
                    result.getString(3),
                    result.getString(4),
                    result.getString(7),
                    result.getString(5),
                    result.getString(6),
                    Math.round(Float.parseFloat(result.getString(8)))
                });
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_searchClientBtnActionPerformed

    private void searchInputBoxKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchInputBoxKeyReleased
        // TODO add your handling code here:
        ClientDao clientDao = new ClientDao();
        
        if (searchInputBox.getText().isEmpty()) {
            retrieveDataFromDbToTable();
        } else {
            try {
                ResultSet result = clientDao.searchClient(searchInputBox.getText());
                
                // clear the rows
                tableModel.setRowCount(0);
                
                while (result.next()) {
                    tableModel.addRow(new Object[] {
                        result.getString(1),
                        result.getString(2),
                        result.getString(3),
                        result.getString(4),
                        result.getString(7),
                        result.getString(5),
                        result.getString(6),
                        Math.round(Float.parseFloat(result.getString(8)))
                    });
                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_searchInputBoxKeyReleased

    private void adminWindowLinkMouseClicked(java.awt.event.MouseEvent evt) throws SQLException {//GEN-FIRST:event_adminWindowLinkMouseClicked
        // TODO add your handling code here:
        if ((getUserLevel()).equals("1")) {
            Admin adminForm = new Admin();
            adminForm.setVisible(true);
            this.dispose();
        } else {
            Login loginForm = new Login();
            loginForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_adminWindowLinkMouseClicked

    private void saveBill(String billOwner, String formattedBill) {
        File file = new File("/Users/hg_ofthecity/Desktop/"+billOwner+"_bill.txt");
        
        try (final OutputStreamWriter wr = new OutputStreamWriter( new FileOutputStream(file))){
            try {
                wr.write(formattedBill);
            } catch (IOException e) {
                e.printStackTrace();
            }
            wr.flush();
        } catch (IOException e) {
            System.out.println("Something went wrong! " + e);
        }
    }
    
    private void billGeneratorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_billGeneratorBtnActionPerformed
        // TODO add your handling code here:
        // ---------- format date ----------
        SimpleDateFormat df = new SimpleDateFormat("dd MM yyyy");
        java.util.Date entranceDate;
        java.util.Date exitDate;
        
        tableModel = (DefaultTableModel) displayClientsTable.getModel();
        int hr = displayClientsTable.getSelectedRow();
        
        if (hr >= 0) {
            String fname = tableModel.getValueAt(hr, 1).toString();
            String lname = tableModel.getValueAt(hr, 2).toString();
            String roomNr = tableModel.getValueAt(hr, 3).toString();
            String fee = tableModel.getValueAt(hr, 4).toString();
            String days = tableModel.getValueAt(hr, 7).toString();
            
            try {
                entranceDate = df.parse(tableModel.getValueAt(hr, 5).toString());
                exitDate = df.parse(tableModel.getValueAt(hr, 6).toString());
                
                String bill = "================================= HAPPY STAY HOTEL =================================\n\n" +
                        fname +" "+ lname + "\n\n" +"Room Nr: "+ roomNr + "\n\n" +
                        "Entrance: " + entranceDate + "\t\t\t" + "Exit: " + exitDate +
                        "\n\n" + "Fee: " + (Float.parseFloat(fee)*Integer.parseInt(days)) + " Rwf" +
                        "\n\n---------------------------------- Welcome again! ----------------------------------";
                saveBill(fname +"_"+ lname, bill);
                JOptionPane.showMessageDialog(this, "Bill generated");
            } catch (ParseException ex) {
                Logger.getLogger(Home.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Bill not generated");
            }
        } else {
            JOptionPane.showMessageDialog(this, "Select client to generate bill");
        }
    }//GEN-LAST:event_billGeneratorBtnActionPerformed

    private void gotoMenuLinkMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gotoMenuLinkMouseClicked
        // TODO add your handling code here:
        if ((getUserLevel()).equals("1")) {
            Admin adminForm = new Admin();
            adminForm.setVisible(true);
            this.dispose();
        } else {
            Receptionist recepForm = new Receptionist();
            recepForm.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_gotoMenuLinkMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu adminWindowLink;
    private javax.swing.JButton billGeneratorBtn;
    private javax.swing.JTextField clientIdBox;
    private javax.swing.JButton deleteClientBtn;
    private javax.swing.JTable displayClientsTable;
    private com.toedter.calendar.JDateChooser entranceDateBox;
    private com.toedter.calendar.JDateChooser exitDateBox;
    private javax.swing.JTextField fnameBox;
    private javax.swing.JLabel gotoMenuLink;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lnameBox;
    private javax.swing.JButton newClientBtn;
    private javax.swing.JMenu openAddRoomWindowLink;
    private javax.swing.JMenu openLogoutWindowLink;
    private javax.swing.JMenu openRoomMgtWindowLink;
    private javax.swing.JComboBox<String> roomTypeSelector;
    private javax.swing.JButton searchClientBtn;
    private javax.swing.JTextField searchInputBox;
    private javax.swing.JButton updateClientBtn;
    // End of variables declaration//GEN-END:variables
}
